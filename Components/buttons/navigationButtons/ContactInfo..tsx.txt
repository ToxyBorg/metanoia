"use client"
import { ActionIcon, Collapse, Stack, useMantineColorScheme } from "@mantine/core"

import { useClickOutside, useDisclosure, useFocusTrap, useMergedRef } from "@mantine/hooks";
import { useAtomValue } from "jotai";
import Link from "next/link";
import { IconContext } from "react-icons";
import { NavBarCollapseColors } from "../../../Shared/colors";
import { contactInfo, instagram, mail } from "../../../Shared/icons";
import { screenSizesAtom } from "../../../Stores/screenSizesStore";


export const ContactInfo = () => {

    const { colorScheme, } = useMantineColorScheme();

    const [opened, handlers] = useDisclosure(false);

    const useClickOutsideRef = useClickOutside(() => { handlers.close() });
    const focusTrapRef = useFocusTrap(opened ? true : false);
    const mergedRef = useMergedRef<HTMLDivElement>(useClickOutsideRef, focusTrapRef);


    const allButtons = [mail, instagram]
    const screenSizes = useAtomValue(screenSizesAtom)
    // const allSizes = getAllSizes[screenSizes]

    return (

        <div ref={mergedRef}>

            <IconContext.Provider
                value={{
                    color: colorScheme === "dark" ? NavBarCollapseColors.iconsLineColorDark : NavBarCollapseColors.iconsLineColorLight,
                    size: "clamp(6vw, 6rem , 15vw)"
                }}>

                <Collapse in={opened} transitionDuration={500} transitionTimingFunction="linear"
                    bg={colorScheme === "dark" ? NavBarCollapseColors.collapseBackgroundColorDark : NavBarCollapseColors.collapseBackgroundColorLight}
                    // w={"100%"}
                    px={"xs"} py={"xs"}
                    sx={{
                        borderRadius: 10,
                        border: `2px solid ${colorScheme === "dark" ? NavBarCollapseColors.collapseBackgroundColorDark : NavBarCollapseColors.collapseBackgroundColorLight}`
                    }}

                >
                    <Stack align="center" spacing={"xs"}>
                        {allButtons.map(button => {
                            return (
                                <ActionIcon variant="transparent" onClick={() => handlers.toggle()}
                                    // bg={colorScheme === "dark" ? NavBarCollapseColors.iconsBackgroundColorDark : NavBarCollapseColors.iconsBackgroundColorLight}
                                    w={"100%"} h={"100%"}
                                    // m={"auto"}
                                    title={button.name}
                                    component={Link} href={button.link!}
                                    radius={"md"}

                                    // sx={{
                                    //     border: `2px solid ${colorScheme === "dark" ? NavBarCollapseColors.iconsBorderColorDark : NavBarCollapseColors.iconsBorderColorLight}`
                                    // }}
                                    key={button.name}
                                >
                                    <button.icon title={button.name} style={{ alignSelf: "center" }} />
                                </ActionIcon>
                            )
                        })}
                    </Stack>
                </Collapse>
            </IconContext.Provider>


            {(screenSizes == "TABLET" || screenSizes == "DESKTOP") &&
                <ActionIcon variant="transparent" onClick={() => handlers.toggle()}
                    w={"100%"} h={"100%"}
                    mx={"auto"}
                    title={contactInfo.name}
                >

                    <contactInfo.icon title={contactInfo.name} />
                </ActionIcon>
            }

        </div>
    )

}



