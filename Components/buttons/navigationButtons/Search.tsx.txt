"use client"
import { ActionIcon, AspectRatio, Badge, Center, Container, createStyles, Drawer, Group, Input, Modal, Stack, Text, Tooltip, UnstyledButton, useMantineColorScheme } from "@mantine/core"

import { circleAlert, search } from "../../../Shared/icons"
import { useDebouncedState, useDisclosure, useFocusTrap, useInputState, useMediaQuery } from "@mantine/hooks";
import { desktopNavIconSizes, desktopNavRadius, mobileNavIconSizes, mobileNavRadius, tabletNavIconSizes, tabletNavRadius } from "../../../Shared/sizes";
import { DrawerColors, ModalColors, SpotlightColors } from "../../../Shared/colors";
import { SpotlightProvider, SpotlightAction, SpotlightActionProps, openSpotlight } from '@mantine/spotlight';
import { useRouter } from 'next/navigation';
import style from "../../../Shared/css/styles.module.css";

import Image from 'next/image';

const actions: SpotlightAction[] = [
    {
        image: 'https://img.icons8.com/clouds/256/000000/futurama-bender.png',
        title: 'Bender Bending Rodríguez',
        description: 'Fascinated with cooking, though has no sense of taste',
        new: true,
        onTrigger: () => { },
    },

    {
        image: 'https://img.icons8.com/clouds/256/000000/futurama-mom.png',
        title: 'Carol Miller',
        description: 'One of the richest people on Earth',
        new: false,
        onTrigger: () => { },
    },
    {
        image: 'https://img.icons8.com/clouds/256/000000/homer-simpson.png',
        title: 'Homer Simpson',
        description: 'Overweight, lazy, and often ignorant',
        new: false,
        onTrigger: () => { },
    },
    {
        image: 'https://img.icons8.com/clouds/256/000000/spongebob-squarepants.png',
        title: 'Spongebob Squarepants',
        description: 'Not just a sponge',
        new: false,
        onTrigger: () => { },
    },
    {
        image: 'https://img.icons8.com/clouds/256/000000/futurama-bender.png',
        title: 'Bender Bending Rodríguez',
        description: 'Fascinated with cooking, though has no sense of taste',
        new: true,
        onTrigger: () => { },
    },

    {
        image: 'https://img.icons8.com/clouds/256/000000/futurama-mom.png',
        title: 'Carol Miller',
        description: 'One of the richest people on Earth',
        new: false,
        onTrigger: () => { },
    },
    {
        image: 'https://img.icons8.com/clouds/256/000000/homer-simpson.png',
        title: 'Homer Simpson',
        description: 'Overweight, lazy, and often ignorant',
        new: false,
        onTrigger: () => { },
    },
    {
        image: 'https://img.icons8.com/clouds/256/000000/spongebob-squarepants.png',
        title: 'Spongebob Squarepants',
        description: 'Not just a sponge',
        new: false,
        onTrigger: () => { },
    },
];

const useStyles = createStyles((theme) => ({
    action: {
        position: 'relative',
        display: 'block',
        width: '100%',
        padding: '1rem 1.25rem',
        borderRadius: theme.radius.sm,
    },

    actionHovered: {
        backgroundImage: theme.colorScheme === "dark" ? SpotlightColors.spotlightActionBackgroundColorDark : SpotlightColors.spotlightActionBackgroundColorLight,
        border: `2px solid ${theme.colorScheme === "dark" ? SpotlightColors.spotlightBorderColorDark : SpotlightColors.spotlightBorderColorLight}`,
    },
}));

function CustomAction({
    action,
    styles,
    classNames,
    hovered,
    onTrigger,
    ...others
}: SpotlightActionProps) {
    const { classes, cx } = useStyles(undefined, { styles, classNames, name: 'Spotlight' });

    const router = useRouter();

    return (
        <UnstyledButton

            className={cx(classes.action, { [classes.actionHovered]: hovered }, style.Animated_Background_Gradient)}

            onMouseDown={(event) => event.preventDefault()}
            onClick={() => router.push(`/category/${action.id}`)}
            {...others}
        >
            <Group noWrap>
                {action.image && (
                    <Center>
                        <AspectRatio ratio={10 / 16}
                            sx={{
                                minWidth: 50,
                                maxWidth: 250,
                            }}
                        >
                            <Image fill={true} src={action.image} alt={action.title} loading='lazy' />
                        </AspectRatio>

                    </Center>
                )}

                <div style={{ flex: 1 }}>
                    <Text>{action.title}</Text>

                    {action.description && (
                        <Text size="xs">
                            {action.description}
                        </Text>
                    )}
                </div>

                {action.new && <Badge>new</Badge>}
            </Group>
        </UnstyledButton>
    );
}



export const MobileSearch = (mobileScreenSize: { mobileScreenSize?: boolean }) => {

    const { colorScheme, } = useMantineColorScheme();

    const [opened, handlers] = useDisclosure(false);

    if (!mobileScreenSize) {
        handlers.close()
    }

    // const [value, setValue] = useDebouncedState('', 500);


    return (

        <>
            <SpotlightProvider

                actions={actions}
                actionComponent={CustomAction}
                limit={4}

                searchIcon={<search.icon size={18} color={colorScheme === "dark" ? SpotlightColors.iconsLineColorDark : SpotlightColors.iconsLineColorLight} />}
                overlayBlur={0} overlayOpacity={0.7}
                searchPlaceholder="Search..."
                shortcut="mod + k"
                nothingFoundMessage="Nothing found..."

                transitionDuration={300}
                transition="slide-down"

                // className={style.Animated_Background_Gradient}

                styles={(theme) => ({

                    spotlight: {
                        backgroundImage: theme.colorScheme === "dark" ? SpotlightColors.spotlightBackgroundColorDark : SpotlightColors.spotlightBackgroundColorLight,
                        border: `2px solid ${theme.colorScheme === "dark" ? SpotlightColors.spotlightBorderColorDark : SpotlightColors.spotlightBorderColorLight}`,
                        backgroundSize: "300% 300%",
                        animation: `${style.AnimateBG} 7s ease infinite`

                    },
                    searchInput: {
                        background: theme.colorScheme === "dark" ? SpotlightColors.spotlightHeaderBackgroundColorDark : SpotlightColors.spotlightHeaderBackgroundColorLight,
                        // borderBottom: `5px solid ${theme.colorScheme === "dark" ? SpotlightColors.spotlightBorderColorDark : SpotlightColors.spotlightBorderColorLight}`,
                        color: theme.colorScheme === "dark" ? SpotlightColors.spotlightHeaderTextColorDark : SpotlightColors.spotlightHeaderTextColorLight,
                        backgroundSize: "300% 300%",
                        animation: `${style.AnimateBG} 7s ease infinite`,
                        // marginBottom: "0"
                    },


                })}
            >

                <ActionIcon variant="transparent" onClick={() => openSpotlight()}
                    size={mobileNavIconSizes.ActionIconSize}
                    sx={{ borderRadius: mobileNavRadius.iconsBorderRadius }}
                    title={search.name}

                >
                    <search.icon title={search.name} />
                </ActionIcon>



            </SpotlightProvider>



        </>
    )

}

/*
<Drawer position="top" opened={opened} onClose={() => handlers.close()} size="md"
                title={"SEARCH"} padding={"sm"} //overlayBlur={3}
                styles={(theme) => ({
                    drawer: {
                        background: colorScheme === "dark" ? DrawerColors.drawerBackgroundColorDark : DrawerColors.drawerBackgroundColorLight,
                        borderRadius: "0 0 15px 15px",
                        border: `2px solid ${colorScheme === "dark" ? DrawerColors.drawerBorderColorDark : DrawerColors.drawerBorderColorLight}`
                    },
                    header: {
                        background: colorScheme === "dark" ? DrawerColors.drawerHeaderBackgroundColorDark : DrawerColors.drawerHeaderBackgroundColorLight,
                        color: colorScheme === "dark" ? DrawerColors.drawerHeaderTextColorDark : DrawerColors.drawerHeaderTextColorLight,
                        borderRadius: 10,
                        border: `2px solid ${colorScheme === "dark" ? DrawerColors.drawerHeaderBorderColorDark : DrawerColors.drawerHeaderBorderColorLight}`,
                        padding: "0.25rem", paddingInline: "1rem",
                        marginInline: "auto"
                    },
                    closeButton: {
                        color: colorScheme === "dark" ? DrawerColors.drawerHeaderTextColorDark : DrawerColors.drawerHeaderTextColorLight,
                    }

                })}
            >

                <Stack
                    spacing={"xs"}
                    w={"100%"}
                    sx={{ height: "15rem" }}
                >

                    <Input

                        variant="default"
                        data-autofocus
                        icon={<search.icon size={16} color={colorScheme === "dark" ? DrawerColors.iconsLineColorDark : DrawerColors.iconsLineColorLight} />}

                        defaultValue={value}
                        onChange={(event) => setValue(event.currentTarget.value)}

                        rightSection={

                            <Tooltip
                                multiline
                                label="You can search for keywords here"
                                events={{ hover: true, focus: true, touch: true }}
                                width={200}
                                position={"bottom-start"}
                            >
                                <ActionIcon variant="transparent"
                                    bg={colorScheme === "dark" ? DrawerColors.drawerHeaderBackgroundColorDark : DrawerColors.drawerHeaderBackgroundColorLight}
                                    sx={{ border: `1px solid ${colorScheme === "dark" ? DrawerColors.drawerHeaderBorderColorDark : DrawerColors.drawerHeaderBorderColorLight}` }}
                                >
                                    <circleAlert.icon size={16} />
                                </ActionIcon>
                            </Tooltip>

                        }

                    />

                    <Container
                        sx={{
                            border: `2px solid ${colorScheme === "dark" ? DrawerColors.drawerHeaderBorderColorDark : DrawerColors.drawerHeaderBorderColorLight}`,
                            borderRadius: 5,
                            overflowY: "scroll", scrollbarWidth: "none",
                            flexGrow: 3, width: "100%"

                        }}
                        p={"xs"}
                        bg={colorScheme === "dark" ? DrawerColors.drawerHeaderBackgroundColorDark : DrawerColors.drawerHeaderBackgroundColorLight}

                    >

                        <Text
                            sx={{ hyphens: "manual", overflowWrap: "break-word" }}>
                            {value}
                        </Text>

                    </Container>

                </Stack>



            </Drawer>
*/

export const TabletSearch = (tabletScreenSize: { tabletScreenSize: boolean }) => {

    const { colorScheme, } = useMantineColorScheme();

    const [opened, handlers] = useDisclosure(false);

    // const useClickOutsideRef = useClickOutside(() => { handlers.close() });
    // const focusTrapRef = useFocusTrap(opened ? true : false);
    // const mergedRef = useMergedRef<HTMLDivElement>(useClickOutsideRef, focusTrapRef);

    if (!tabletScreenSize) {
        handlers.close()
    }

    const [value, setValue] = useDebouncedState('', 500);


    return (

        <>
            <ActionIcon variant="transparent" onClick={() => handlers.toggle()}
                size={tabletNavIconSizes.ActionIconSize}
                sx={{ borderRadius: tabletNavRadius.iconsBorderRadius }}
                mx={"auto"}
                title={search.name}

            >
                <search.icon title={search.name} />
            </ActionIcon>

            <Modal opened={opened} onClose={() => handlers.close()} title="SEARCH" size={"lg"} //overlayBlur={3}

                styles={(theme) => ({
                    modal: {
                        margin: "auto",
                        background: colorScheme === "dark" ? ModalColors.modalBackgroundColorDark : ModalColors.modalBackgroundColorLight,
                        borderRadius: 15,
                        border: `2px solid ${colorScheme === "dark" ? ModalColors.modalBorderColorDark : ModalColors.modalBorderColorLight}`
                    },
                    header: {
                        background: colorScheme === "dark" ? ModalColors.modalHeaderBackgroundColorDark : ModalColors.modalHeaderBackgroundColorLight,
                        color: colorScheme === "dark" ? ModalColors.modalHeaderTextColorDark : ModalColors.modalHeaderTextColorLight,
                        borderRadius: 10,
                        border: `2px solid ${colorScheme === "dark" ? ModalColors.modalHeaderBorderColorDark : ModalColors.modalHeaderBorderColorLight}`,
                        padding: "0.25rem", paddingInline: "1rem",
                        marginInline: "auto"
                    },
                    close: {
                        color: colorScheme === "dark" ? ModalColors.modalHeaderTextColorDark : ModalColors.modalHeaderTextColorLight,
                    },

                })}

            >

                <Stack
                    spacing={"xs"}
                    w={"100%"}
                    sx={{ height: "15rem" }}
                >

                    <Input

                        variant="default"
                        data-autofocus
                        icon={<search.icon size={16} color={colorScheme === "dark" ? ModalColors.iconsLineColorDark : ModalColors.iconsLineColorLight} />}

                        defaultValue={value}
                        onChange={(event) => setValue(event.currentTarget.value)}

                        rightSection={

                            <Tooltip
                                multiline
                                label="You can search for keywords here"
                                events={{ hover: true, focus: true, touch: true }}
                                width={200}
                                position={"bottom-start"}
                            >
                                <ActionIcon variant="transparent"
                                    bg={colorScheme === "dark" ? ModalColors.modalHeaderBackgroundColorDark : ModalColors.modalHeaderBackgroundColorLight}
                                    sx={{ border: `1px solid ${colorScheme === "dark" ? ModalColors.modalHeaderBorderColorDark : ModalColors.modalHeaderBorderColorLight}` }}
                                >
                                    <circleAlert.icon size={16} />
                                </ActionIcon>
                            </Tooltip>

                        }

                    />

                    <Container
                        sx={{
                            border: `2px solid ${colorScheme === "dark" ? ModalColors.modalHeaderBorderColorDark : ModalColors.modalHeaderBorderColorLight}`,
                            borderRadius: 5,
                            overflowY: "scroll", scrollbarWidth: "none",
                            flexGrow: 3, width: "100%"

                        }}
                        p={"xs"}
                        bg={colorScheme === "dark" ? ModalColors.modalHeaderBackgroundColorDark : ModalColors.modalHeaderBackgroundColorLight}

                    >

                        <Text
                            sx={{ hyphens: "manual", overflowWrap: "break-word" }}>
                            {value}
                        </Text>

                    </Container>

                </Stack>

            </Modal>

        </>
    )



}

export const DesktopSearch = (desktopScreenSize: { desktopScreenSize: boolean }) => {

    const { colorScheme, } = useMantineColorScheme();

    const [opened, handlers] = useDisclosure(false);

    // const useClickOutsideRef = useClickOutside(() => { handlers.close() });
    // const focusTrapRef = useFocusTrap(opened ? true : false);
    // const mergedRef = useMergedRef<HTMLDivElement>(useClickOutsideRef, focusTrapRef);

    if (!desktopScreenSize) {
        handlers.close()
    }

    const [value, setValue] = useDebouncedState('', 500);


    return (

        <>
            <ActionIcon variant="transparent" onClick={() => handlers.toggle()}
                size={desktopNavIconSizes.ActionIconSize}
                sx={{ borderRadius: desktopNavRadius.iconsBorderRadius }}
                mx={"auto"}
                title={search.name}
            >
                <search.icon title={search.name} />
            </ActionIcon>

            <Modal opened={opened} onClose={() => handlers.close()} title="SEARCH" size={"xl"} //overlayBlur={3}

                styles={(theme) => ({
                    modal: {
                        margin: "auto",
                        background: colorScheme === "dark" ? ModalColors.modalBackgroundColorDark : ModalColors.modalBackgroundColorLight,
                        borderRadius: 15,
                        border: `2px solid ${colorScheme === "dark" ? ModalColors.modalBorderColorDark : ModalColors.modalBorderColorLight}`
                    },
                    header: {
                        background: colorScheme === "dark" ? ModalColors.modalHeaderBackgroundColorDark : ModalColors.modalHeaderBackgroundColorLight,
                        color: colorScheme === "dark" ? ModalColors.modalHeaderTextColorDark : ModalColors.modalHeaderTextColorLight,
                        borderRadius: 10,
                        border: `2px solid ${colorScheme === "dark" ? ModalColors.modalHeaderBorderColorDark : ModalColors.modalHeaderBorderColorLight}`,
                        padding: "0.25rem", paddingInline: "1rem",
                        marginInline: "auto"
                    },
                    close: {
                        color: colorScheme === "dark" ? ModalColors.modalHeaderTextColorDark : ModalColors.modalHeaderTextColorLight,
                    },

                })}

            >

                <Stack
                    spacing={"xs"}
                    w={"100%"}
                    sx={{ height: "15rem" }}
                >

                    <Input

                        variant="default"
                        data-autofocus
                        icon={<search.icon size={16} color={colorScheme === "dark" ? ModalColors.iconsLineColorDark : ModalColors.iconsLineColorLight} />}

                        defaultValue={value}
                        onChange={(event) => setValue(event.currentTarget.value)}

                        rightSection={

                            <Tooltip
                                multiline
                                label="You can search for keywords here"
                                events={{ hover: true, focus: true, touch: true }}
                                width={200}
                                position={"bottom-start"}
                            >
                                <ActionIcon variant="transparent"
                                    bg={colorScheme === "dark" ? ModalColors.modalHeaderBackgroundColorDark : ModalColors.modalHeaderBackgroundColorLight}
                                    sx={{ border: `1px solid ${colorScheme === "dark" ? ModalColors.modalHeaderBorderColorDark : ModalColors.modalHeaderBorderColorLight}` }}
                                >
                                    <circleAlert.icon size={16} />
                                </ActionIcon>
                            </Tooltip>

                        }

                    />

                    <Container
                        sx={{
                            border: `2px solid ${colorScheme === "dark" ? ModalColors.modalHeaderBorderColorDark : ModalColors.modalHeaderBorderColorLight}`,
                            borderRadius: 5,
                            overflowY: "scroll", scrollbarWidth: "none",
                            flexGrow: 3, width: "100%"

                        }}
                        p={"xs"}
                        bg={colorScheme === "dark" ? ModalColors.modalHeaderBackgroundColorDark : ModalColors.modalHeaderBackgroundColorLight}

                    >

                        <Text
                            sx={{ hyphens: "manual", overflowWrap: "break-word" }}>
                            {value}
                        </Text>

                    </Container>

                </Stack>

            </Modal>

        </>
    )



}