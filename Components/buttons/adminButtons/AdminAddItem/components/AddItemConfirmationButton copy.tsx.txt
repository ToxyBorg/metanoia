import { ActionIcon, Group, Text, useMantineColorScheme } from "@mantine/core";
import { showNotification } from "@mantine/notifications";
import { useAtom, useAtomValue } from "jotai";
import type { NextComponentType, NextPageContext } from "next";
import { useSupabase } from "../../../../../Context/SupabaseWrapper/supabase-provider";
import { CardContainerColors, NavBarColors, StepperColors } from "../../../../../Shared/colors";
import style from "../../../../../Shared/css/style";
import { arrowNext } from "../../../../../Shared/icons";
import { adminAddItemAtom, adminAddItemType } from "../../../../../Stores/adminAddItemStore";

interface Props {
    loadingOverlayVisibleHandlers: {
        readonly open: () => void;
        readonly close: () => void;
        readonly toggle: () => void;
    },

    handlers: {
        readonly open: () => void;
        readonly close: () => void;
        readonly toggle: () => void;
    },
}

const AddItemConfirmationButton: NextComponentType<NextPageContext, {}, Props> = (
    props: Props,
) => {

    const { colorScheme, } = useMantineColorScheme();
    const [adminAddItemAtomValue, adminAddItemAtomSetter] = useAtom(adminAddItemAtom)

    const { supabase, } = useSupabase()


    // const handleTestingInsert = async () => {
    //     const { data, error: insertError } = await supabase
    //         .from('all_items')
    //         .insert([
    //             {
    //                 category: adminAddItemAtomValue.category,
    //                 description: adminAddItemAtomValue.description,
    //                 mainImageURL: '',
    //                 secondaryImagesURLS: [],
    //                 price: adminAddItemAtomValue.price,
    //                 stock: adminAddItemAtomValue.stock,
    //                 title: adminAddItemAtomValue.title,
    //                 tags: adminAddItemAtomValue.tags
    //             },
    //         ])

    //     if (insertError) {
    //         console.log(insertError)
    //         props.loadingOverlayVisibleHandlers.close()
    //     }
    //     else {
    //         alert("SUCCESS")
    //         props.loadingOverlayVisibleHandlers.close()
    //     }

    // }


    const handleItemInsert = async () => {
        // const newArr = adminAddItemAtomValue

        const { data, error: insertError } = await supabase
            .from('all_items')
            .insert([
                {
                    category: adminAddItemAtomValue.category,
                    description: adminAddItemAtomValue.description,
                    mainImageURL: '',
                    secondaryImagesURLS: [],
                    price: adminAddItemAtomValue.price,
                    stock: adminAddItemAtomValue.stock,
                    title: adminAddItemAtomValue.title,
                    tags: adminAddItemAtomValue.tags
                },
            ])

        if (insertError) {
            showNotification({

                color: "red",
                radius: "md",
                title: 'Item insertion Error',
                message: <p>Item could not be uploaded to our servers. Please try again!</p>,
                // icon: <errorIcon.icon />,

                styles: (theme) => ({


                    root: {
                        background: colorScheme === "dark"
                            ? CardContainerColors.backgroundColorDark
                            : CardContainerColors.backgroundColorLight,
                        backgroundSize: "300% 300%",
                        animation: `${style.AnimateBG} 7s ease infinite`,

                        border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
                    },

                    title: {

                        background: colorScheme === "dark"
                            ? CardContainerColors.backgroundColorDark
                            : CardContainerColors.backgroundColorLight,
                        backgroundSize: "300% 300%",
                        animation: `${style.AnimateBG} 7s ease infinite`,


                        // border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
                        padding: "0.5rem",
                        borderRadius: 5,

                        fontWeight: "bolder",
                        color: colorScheme === "dark"
                            ? CardContainerColors.textColorDark
                            : CardContainerColors.textColorLight
                    },
                    description: {
                        fontStyle: "italic",

                        color: colorScheme === "dark"
                            ? CardContainerColors.textColorDark
                            : CardContainerColors.textColorLight
                    },
                    closeButton: {
                        color: colorScheme === "dark"
                            ? CardContainerColors.textColorDark
                            : CardContainerColors.textColorLight,

                        '&:hover': {
                            backgroundColor: "red"
                        },
                    },
                }),

            })

            props.loadingOverlayVisibleHandlers.close()

        } else {
            // showNotification({

            //     color: "green",
            //     radius: "md",
            //     title: 'Item insertion confirmed',
            //     message: <p>The item you added has been accepted. Try checking the main page to see it!</p>,
            //     // icon: <errorIcon.icon />,

            //     styles: (theme) => ({


            //         root: {
            //             background: colorScheme === "dark"
            //                 ? CardContainerColors.backgroundColorDark
            //                 : CardContainerColors.backgroundColorLight,
            //             backgroundSize: "300% 300%",
            //             animation: `${style.AnimateBG} 7s ease infinite`,

            //             border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
            //         },

            //         title: {

            //             background: colorScheme === "dark"
            //                 ? CardContainerColors.backgroundColorDark
            //                 : CardContainerColors.backgroundColorLight,
            //             backgroundSize: "300% 300%",
            //             animation: `${style.AnimateBG} 7s ease infinite`,


            //             // border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
            //             padding: "0.5rem",
            //             borderRadius: 5,

            //             fontWeight: "bolder",
            //             color: colorScheme === "dark"
            //                 ? CardContainerColors.textColorDark
            //                 : CardContainerColors.textColorLight
            //         },
            //         description: {
            //             fontStyle: "italic",

            //             color: colorScheme === "dark"
            //                 ? CardContainerColors.textColorDark
            //                 : CardContainerColors.textColorLight
            //         },
            //         closeButton: {
            //             color: colorScheme === "dark"
            //                 ? CardContainerColors.textColorDark
            //                 : CardContainerColors.textColorLight,

            //             '&:hover': {
            //                 backgroundColor: "green"
            //             },
            //         },
            //     }),

            // })
            const { data: item_id, error: id_error } = await supabase
                .from('all_items')
                .select('item_id')

            if (id_error) {
                const { data, error } = await supabase
                    .from('all_items')
                    .delete()
                    .eq('title', adminAddItemAtomValue.title)
                    .eq('description', adminAddItemAtomValue.description)

                props.loadingOverlayVisibleHandlers.close()

                showNotification({

                    color: "red",
                    radius: "md",
                    title: 'Item id Error',
                    message: <p>Item id could not be selected from our servers. Please try again!</p>,
                    // icon: <errorIcon.icon />,

                    styles: (theme) => ({


                        root: {
                            background: colorScheme === "dark"
                                ? CardContainerColors.backgroundColorDark
                                : CardContainerColors.backgroundColorLight,
                            backgroundSize: "300% 300%",
                            animation: `${style.AnimateBG} 7s ease infinite`,

                            border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
                        },

                        title: {

                            background: colorScheme === "dark"
                                ? CardContainerColors.backgroundColorDark
                                : CardContainerColors.backgroundColorLight,
                            backgroundSize: "300% 300%",
                            animation: `${style.AnimateBG} 7s ease infinite`,


                            // border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
                            padding: "0.5rem",
                            borderRadius: 5,

                            fontWeight: "bolder",
                            color: colorScheme === "dark"
                                ? CardContainerColors.textColorDark
                                : CardContainerColors.textColorLight
                        },
                        description: {
                            fontStyle: "italic",

                            color: colorScheme === "dark"
                                ? CardContainerColors.textColorDark
                                : CardContainerColors.textColorLight
                        },
                        closeButton: {
                            color: colorScheme === "dark"
                                ? CardContainerColors.textColorDark
                                : CardContainerColors.textColorLight,

                            '&:hover': {
                                backgroundColor: "red"
                            },
                        },
                    }),

                })
            }
            else {
                if (item_id !== null) {
                    const fileName = item_id[0].item_id

                    const { data: mainImagePath, error: uploadError } = await supabase.storage
                        .from('items')
                        // .upload(`${adminAddItemAtomValue.category}/${fileName}/main`, adminAddItemAtomValue.mainImageURL
                        .upload(`${adminAddItemAtomValue.category}/${fileName}/main`, adminAddItemAtomValue.mainImageURL!
                            , { upsert: true }

                        )
                    if (uploadError) {
                        showNotification({

                            color: "red",
                            radius: "md",
                            title: 'Item image Error',
                            message: <p>Item main image could not be uploaded to our servers. Please try again!</p>,
                            // icon: <errorIcon.icon />,

                            styles: (theme) => ({


                                root: {
                                    background: colorScheme === "dark"
                                        ? CardContainerColors.backgroundColorDark
                                        : CardContainerColors.backgroundColorLight,
                                    backgroundSize: "300% 300%",
                                    animation: `${style.AnimateBG} 7s ease infinite`,

                                    border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
                                },

                                title: {

                                    background: colorScheme === "dark"
                                        ? CardContainerColors.backgroundColorDark
                                        : CardContainerColors.backgroundColorLight,
                                    backgroundSize: "300% 300%",
                                    animation: `${style.AnimateBG} 7s ease infinite`,


                                    // border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
                                    padding: "0.5rem",
                                    borderRadius: 5,

                                    fontWeight: "bolder",
                                    color: colorScheme === "dark"
                                        ? CardContainerColors.textColorDark
                                        : CardContainerColors.textColorLight
                                },
                                description: {
                                    fontStyle: "italic",

                                    color: colorScheme === "dark"
                                        ? CardContainerColors.textColorDark
                                        : CardContainerColors.textColorLight
                                },
                                closeButton: {
                                    color: colorScheme === "dark"
                                        ? CardContainerColors.textColorDark
                                        : CardContainerColors.textColorLight,

                                    '&:hover': {
                                        backgroundColor: "red"
                                    },
                                },
                            }),

                        })
                        const { data, error } = await supabase
                            .from('all_items')
                            .delete()
                            .eq('title', adminAddItemAtomValue.title)
                            .eq('description', adminAddItemAtomValue.description)

                        const { data: mainImageDeleteData, error: mainImageDeleteError } = await supabase
                            .storage
                            .from('items')
                            .remove([`${adminAddItemAtomValue.category}/${fileName}/main`])

                        props.loadingOverlayVisibleHandlers.close()

                    }
                    else {

                        const secondaryImagesPaths: string[] = []
                        const Indexes: number[] = []

                        for (const image of adminAddItemAtomValue.secondaryImagesURLS) {

                            if (image != null) {
                                const index = adminAddItemAtomValue.secondaryImagesURLS.indexOf(image)
                                Indexes.push(index)
                                const { data: secondaryImagePath, error: uploadError } = await supabase.storage
                                    .from('items')
                                    .upload(`${adminAddItemAtomValue.category}/${fileName}/${index}`, image
                                        , { upsert: true }

                                    )

                                if (uploadError) {
                                    showNotification({

                                        color: "red",
                                        radius: "md",
                                        title: 'Item image Error',
                                        message: <p>Item image N{index} could not be uploaded to our servers. Please try again!</p>,
                                        // icon: <errorIcon.icon />,

                                        styles: (theme) => ({


                                            root: {
                                                background: colorScheme === "dark"
                                                    ? CardContainerColors.backgroundColorDark
                                                    : CardContainerColors.backgroundColorLight,
                                                backgroundSize: "300% 300%",
                                                animation: `${style.AnimateBG} 7s ease infinite`,

                                                border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
                                            },

                                            title: {

                                                background: colorScheme === "dark"
                                                    ? CardContainerColors.backgroundColorDark
                                                    : CardContainerColors.backgroundColorLight,
                                                backgroundSize: "300% 300%",
                                                animation: `${style.AnimateBG} 7s ease infinite`,


                                                // border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
                                                padding: "0.5rem",
                                                borderRadius: 5,

                                                fontWeight: "bolder",
                                                color: colorScheme === "dark"
                                                    ? CardContainerColors.textColorDark
                                                    : CardContainerColors.textColorLight
                                            },
                                            description: {
                                                fontStyle: "italic",

                                                color: colorScheme === "dark"
                                                    ? CardContainerColors.textColorDark
                                                    : CardContainerColors.textColorLight
                                            },
                                            closeButton: {
                                                color: colorScheme === "dark"
                                                    ? CardContainerColors.textColorDark
                                                    : CardContainerColors.textColorLight,

                                                '&:hover': {
                                                    backgroundColor: "red"
                                                },
                                            },
                                        }),

                                    })
                                    const { data, error } = await supabase
                                        .from('all_items')
                                        .delete()
                                        .eq('title', adminAddItemAtomValue.title)
                                        .eq('description', adminAddItemAtomValue.description)

                                    const { data: secondaryImageDeleteData, error: secondaryImageDeleteError } = await supabase
                                        .storage
                                        .from('items')
                                        .remove([`${adminAddItemAtomValue.category}/${fileName}/${index}`])

                                    props.loadingOverlayVisibleHandlers.close()

                                }
                                else {
                                    secondaryImagesPaths.push(secondaryImagePath.path)
                                }

                            }
                        }

                        const { data: updatingMainImage, error: updatingMainImageError } = await supabase
                            .from('all_items')
                            .update({ 'mainImageURL': mainImagePath.path })
                            .eq('item_id', item_id[0].item_id)

                        const { data: updatingSecondaryImages, error: updatingSecondaryImageError } = await supabase
                            .from('all_items')
                            .update({ 'secondaryImagesURLS': secondaryImagesPaths })
                            .eq('item_id', item_id[0].item_id)

                        if (updatingMainImageError || updatingSecondaryImageError) {
                            showNotification({

                                color: "red",
                                radius: "md",
                                title: 'Item image update Error',
                                message: <p>Item images could not be updated/upserted to our servers. Please try again!</p>,
                                // icon: <errorIcon.icon />,

                                styles: (theme) => ({


                                    root: {
                                        background: colorScheme === "dark"
                                            ? CardContainerColors.backgroundColorDark
                                            : CardContainerColors.backgroundColorLight,
                                        backgroundSize: "300% 300%",
                                        animation: `${style.AnimateBG} 7s ease infinite`,

                                        border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
                                    },

                                    title: {

                                        background: colorScheme === "dark"
                                            ? CardContainerColors.backgroundColorDark
                                            : CardContainerColors.backgroundColorLight,
                                        backgroundSize: "300% 300%",
                                        animation: `${style.AnimateBG} 7s ease infinite`,


                                        // border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
                                        padding: "0.5rem",
                                        borderRadius: 5,

                                        fontWeight: "bolder",
                                        color: colorScheme === "dark"
                                            ? CardContainerColors.textColorDark
                                            : CardContainerColors.textColorLight
                                    },
                                    description: {
                                        fontStyle: "italic",

                                        color: colorScheme === "dark"
                                            ? CardContainerColors.textColorDark
                                            : CardContainerColors.textColorLight
                                    },
                                    closeButton: {
                                        color: colorScheme === "dark"
                                            ? CardContainerColors.textColorDark
                                            : CardContainerColors.textColorLight,

                                        '&:hover': {
                                            backgroundColor: "red"
                                        },
                                    },
                                }),

                            })

                            props.loadingOverlayVisibleHandlers.close()


                            const { data, error } = await supabase
                                .from('all_items')
                                .delete()
                                .eq('title', adminAddItemAtomValue.title)
                                .eq('description', adminAddItemAtomValue.description)

                            for (const image of secondaryImagesPaths) {
                                const index = secondaryImagesPaths.indexOf(image)
                                const { data: secondaryImageDeleteData, error: secondaryImageDeleteError } = await supabase
                                    .storage
                                    .from('items')
                                    .remove([`${adminAddItemAtomValue.category}/${fileName}/${Indexes[index]}`])
                            }

                            const { data: mainImageDeleteData, error: mainImageDeleteError } = await supabase
                                .storage
                                .from('items')
                                .remove([`${adminAddItemAtomValue.category}/${fileName}/main`])

                        }
                        else {
                            // ITEM INSERT SUCCESS
                            showNotification({

                                color: "green",
                                radius: "md",
                                title: 'Item insertion confirmed',
                                message: <p>The item you added has been accepted. Try checking the main page to see it!</p>,
                                // icon: <errorIcon.icon />,

                                styles: (theme) => ({


                                    root: {
                                        background: colorScheme === "dark"
                                            ? CardContainerColors.backgroundColorDark
                                            : CardContainerColors.backgroundColorLight,
                                        backgroundSize: "300% 300%",
                                        animation: `${style.AnimateBG} 7s ease infinite`,

                                        border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
                                    },

                                    title: {

                                        background: colorScheme === "dark"
                                            ? CardContainerColors.backgroundColorDark
                                            : CardContainerColors.backgroundColorLight,
                                        backgroundSize: "300% 300%",
                                        animation: `${style.AnimateBG} 7s ease infinite`,


                                        // border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
                                        padding: "0.5rem",
                                        borderRadius: 5,

                                        fontWeight: "bolder",
                                        color: colorScheme === "dark"
                                            ? CardContainerColors.textColorDark
                                            : CardContainerColors.textColorLight
                                    },
                                    description: {
                                        fontStyle: "italic",

                                        color: colorScheme === "dark"
                                            ? CardContainerColors.textColorDark
                                            : CardContainerColors.textColorLight
                                    },
                                    closeButton: {
                                        color: colorScheme === "dark"
                                            ? CardContainerColors.textColorDark
                                            : CardContainerColors.textColorLight,

                                        '&:hover': {
                                            backgroundColor: "green"
                                        },
                                    },
                                }),

                            })

                            props.loadingOverlayVisibleHandlers.close()

                        }

                    }

                }
                else {
                    props.loadingOverlayVisibleHandlers.close()

                    showNotification({

                        color: "red",
                        radius: "md",
                        title: 'Item id Error',
                        message: <p>Item id returned null from our servers. Please try again!</p>,
                        // icon: <errorIcon.icon />,

                        styles: (theme) => ({


                            root: {
                                background: colorScheme === "dark"
                                    ? CardContainerColors.backgroundColorDark
                                    : CardContainerColors.backgroundColorLight,
                                backgroundSize: "300% 300%",
                                animation: `${style.AnimateBG} 7s ease infinite`,

                                border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
                            },

                            title: {

                                background: colorScheme === "dark"
                                    ? CardContainerColors.backgroundColorDark
                                    : CardContainerColors.backgroundColorLight,
                                backgroundSize: "300% 300%",
                                animation: `${style.AnimateBG} 7s ease infinite`,


                                // border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
                                padding: "0.5rem",
                                borderRadius: 5,

                                fontWeight: "bolder",
                                color: colorScheme === "dark"
                                    ? CardContainerColors.textColorDark
                                    : CardContainerColors.textColorLight
                            },
                            description: {
                                fontStyle: "italic",

                                color: colorScheme === "dark"
                                    ? CardContainerColors.textColorDark
                                    : CardContainerColors.textColorLight
                            },
                            closeButton: {
                                color: colorScheme === "dark"
                                    ? CardContainerColors.textColorDark
                                    : CardContainerColors.textColorLight,

                                '&:hover': {
                                    backgroundColor: "red"
                                },
                            },
                        }),

                    })
                }
            }

        }

        const newArr: adminAddItemType = {
            category: "earrings", // required
            description: '', // required
            created_at: null,
            item_id: '',
            mainImageURL: null, // required
            price: 0, // required
            secondaryImagesURLS: [null, null, null], // required
            stock: 1, // required
            tags: [], // required
            title: '', // required
        }
        adminAddItemAtomSetter(newArr)
        // props.handlers.close()
        window.location.reload()

    }
    return (

        <ActionIcon
            variant="outline" title={arrowNext.name} w={"fit-content"} h={"100%"}
            mx={"auto"} mb={"5rem"} py={"xs"} radius={"md"} px={"lg"}
            bg={colorScheme === "dark" ? NavBarColors.backgroundColorDark : NavBarColors.backgroundColorLight}
            className={style.Animated_Background_Gradient}
            onClick={() => {


                let fieldsHaveBeenFilled: boolean = true

                if (adminAddItemAtomValue.title.length <= 1) {
                    fieldsHaveBeenFilled = false
                }
                else if (adminAddItemAtomValue.description.length <= 1) {
                    fieldsHaveBeenFilled = false
                }
                // else if (adminAddItemAtomValue.mainImageURL.length <= 1) {
                //     fieldsHaveBeenFilled = false
                // }
                else if (adminAddItemAtomValue.mainImageURL == null) {
                    fieldsHaveBeenFilled = false
                }
                else if (adminAddItemAtomValue.price <= 0) {
                    fieldsHaveBeenFilled = false
                }
                // else if (adminAddItemAtomValue.secondaryImagesURLS.every((word) => word.trim().length == 0)) {
                //     fieldsHaveBeenFilled = false
                // }
                else if (adminAddItemAtomValue.secondaryImagesURLS.every((word) => word == null)) {
                    fieldsHaveBeenFilled = false
                }
                else if (adminAddItemAtomValue.stock == 0) {
                    fieldsHaveBeenFilled = false
                }
                else if (adminAddItemAtomValue.tags.length == 0) {
                    fieldsHaveBeenFilled = false
                }


                if (fieldsHaveBeenFilled == false) {

                    showNotification({

                        color: "red",
                        radius: "md",
                        title: "Item insert Error",
                        message: <p>One or More fields have been left blank!</p>,
                        // icon: <errorIcon.icon />,

                        styles: (theme) => ({


                            root: {
                                background: colorScheme === "dark"
                                    ? CardContainerColors.backgroundColorDark
                                    : CardContainerColors.backgroundColorLight,
                                backgroundSize: "300% 300%",
                                animation: `${style.AnimateBG} 7s ease infinite`,

                                border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
                            },

                            title: {

                                background: colorScheme === "dark"
                                    ? CardContainerColors.backgroundColorDark
                                    : CardContainerColors.backgroundColorLight,
                                backgroundSize: "300% 300%",
                                animation: `${style.AnimateBG} 7s ease infinite`,


                                // border: `2px solid ${colorScheme === "dark" ? CardContainerColors.borderColorDark : CardContainerColors.borderColorLight}`,
                                padding: "0.5rem",
                                borderRadius: 5,

                                fontWeight: "bolder",
                                color: colorScheme === "dark"
                                    ? CardContainerColors.textColorDark
                                    : CardContainerColors.textColorLight
                            },
                            description: {
                                fontStyle: "italic",

                                color: colorScheme === "dark"
                                    ? CardContainerColors.textColorDark
                                    : CardContainerColors.textColorLight
                            },
                            closeButton: {
                                color: colorScheme === "dark"
                                    ? CardContainerColors.textColorDark
                                    : CardContainerColors.textColorLight,

                                '&:hover': {
                                    backgroundColor: "red"
                                },
                            },
                        }),

                    })
                }
                else {
                    props.loadingOverlayVisibleHandlers.open()
                    handleItemInsert()

                }



            }}
            sx={{
                border: `2px solid ${colorScheme === "dark" ? NavBarColors.borderColorDark : NavBarColors.borderColorLight}`,
                WebkitBackdropFilter: "blur(2px)",
                boxShadow: "0 4px 30px rgba(0, 0, 0, 0.5)",
            }}
        >
            <Group>
                <arrowNext.icon size={"2rem"} />
                <Text size={"md"}
                    color={colorScheme === "dark"
                        ? StepperColors.iconsLineColorDark
                        : StepperColors.iconsLineColorLight
                    }
                >
                    Add this item
                </Text>
            </Group>
        </ActionIcon>


    )
}

export default AddItemConfirmationButton